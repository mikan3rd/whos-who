# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UploadedImage {
  id: ID!
  bucketName: String!
  fileName: String!
  url: String!
  createdAt: Date!
  updatedAt: Date!
  ticket: Ticket
}

"""Date custom scalar type"""
scalar Date

type ExternalImage {
  id: ID!
  url: String!
  statusCode: Int!
  createdAt: Date!
  updatedAt: Date!
  ticket: Ticket
}

type OccupationCount {
  persons: Int!
}

type Occupation {
  id: ID!
  name: String!
  nameHiragana: String
  nameKatakana: String
  nameAlphabet: String
  createdAt: Date!
  updatedAt: Date!
  persons: [Person!]
  _count: OccupationCount!
}

type PersonSuggestionLike {
  id: ID!
  ticketId: String!
  personSuggestionId: String!
  userId: String!
  createdAt: Date!
  updatedAt: Date!
  ticket: Ticket!
  personSuggestion: PersonSuggestion!
  user: User!
}

type PersonSuggestionCount {
  personSuggestionLikes: Int!
}

type PersonSuggestion {
  id: ID!
  ticketId: String!
  personId: String!
  userId: String!
  createdAt: Date!
  updatedAt: Date!
  ticket: Ticket!
  person: Person!
  user: User!
  personSuggestionLikes: [PersonSuggestionLike!]
  mainTicket: Ticket
  _count: PersonSuggestionCount!
}

type PersonCount {
  tickets: Int!
  personSuggestions: Int!
}

type Person {
  id: ID!
  name: String!
  nameHiragana: String
  nameKatakana: String
  nameAlphabet: String
  birthDate: Date
  occupationId: String
  createdAt: Date!
  updatedAt: Date!
  tickets: [Ticket!]
  occupation: Occupation
  personSuggestions: [PersonSuggestion!]
  _count: PersonCount!
}

type TicketUserLike {
  id: ID!
  ticketId: String!
  userId: String!
  createdAt: Date!
  updatedAt: Date!
  ticket: Ticket!
  user: User!
}

type TicketCount {
  ticketUserLikes: Int!
  personSuggestions: Int!
  personSuggestionLikes: Int!
}

type Ticket {
  id: ID!
  userId: String!
  uploadedImageId: String
  externalImageId: String
  personId: String
  mainPersonSuggestionId: String
  createdAt: Date!
  updatedAt: Date!
  user: User!
  uploadedImage: UploadedImage
  externalImage: ExternalImage
  person: Person
  mainPersonSuggestion: PersonSuggestion
  ticketUserLikes: [TicketUserLike!]
  personSuggestions: [PersonSuggestion!]
  personSuggestionLikes: [PersonSuggestionLike!]
  _count: TicketCount!
}

type TwitterAuthCredential {
  id: ID!
  userId: String!
  uid: String!
  email: String
  displayName: String
  screenName: String
  photoUrl: String
  accessToken: String!
  refreshToken: String!
  oauthAccessToken: String!
  oauthTokenSecret: String!
  createdAt: Date!
  updatedAt: Date!
  user: User!
}

type UserCount {
  tickets: Int!
  ticketUserLikes: Int!
  personSuggestions: Int!
  personSuggestionLikes: Int!
}

type User {
  id: ID!
  authUid: String!
  displayName: String
  photoUrl: String
  email: String
  role: UserRole!
  status: UserStatus!
  point: Int!
  createdAt: Date!
  updatedAt: Date!
  tickets: [Ticket!]
  ticketUserLikes: [TicketUserLike!]
  personSuggestions: [PersonSuggestion!]
  personSuggestionLikes: [PersonSuggestionLike!]
  googleAuthCredential: GoogleAuthCredential
  twitterAuthCredential: TwitterAuthCredential
  _count: UserCount!
}

enum UserRole {
  NONE
  MEMBER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
}

type GoogleAuthCredential {
  id: ID!
  userId: String!
  uid: String!
  displayName: String
  photoUrl: String
  accessToken: String!
  refreshToken: String!
  email: String!
  createdAt: Date!
  updatedAt: Date!
  user: User!
}

type Query {
  getCurrentUser: User!
  getTicketByExternalImageUrl(externalImageUrl: String!): Ticket
  getTicketById(id: String!): Ticket
  searchPersonByWord(word: String!): [Person!]!
}

type Mutation {
  createTicketByExternalImageUrl(externalImageUrl: String!): Ticket!
  createTicketByUploadImageFile(file: Upload!): Ticket!
  createPersonSuggestion(personSuggestionCreate: PersonSuggestionCreateInput!): PersonSuggestion!
  createPersonSuggestionLike(personSuggestionId: String!): PersonSuggestionLike!
  upsertGoogleAuthCredential(googleAuthCredentialInput: GoogleAuthCredentialInput!): GoogleAuthCredential!
  upsertTwitterAuthCredential(twitterAuthCredentialInput: TwitterAuthCredentialInput!): TwitterAuthCredential!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PersonSuggestionCreateInput {
  ticketId: String!
  personId: String
  personName: String
}

input GoogleAuthCredentialInput {
  accessToken: String!
  refreshToken: String!
  uid: String!
  email: String!
  displayName: String
  photoUrl: String
}

input TwitterAuthCredentialInput {
  accessToken: String!
  refreshToken: String!
  oauthAccessToken: String!
  oauthTokenSecret: String!
  uid: String!
  email: String
  displayName: String
  screenName: String
  photoUrl: String
}
