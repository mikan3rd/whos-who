generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// https://github.com/unlight/prisma-nestjs-graphql
generator nestgraphql {
  provider    = "node ../../node_modules/prisma-nestjs-graphql"
  output      = "./model"
  purgeOutput = true
}

enum UserRole {
  NONE
  MEMBER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
}

model User {
  id          String     @id @default(uuid())
  authUid     String     @unique @db.VarChar(255)
  displayName String?    @db.VarChar(255)
  photoUrl    String?    @db.VarChar(255)
  email       String?    @db.VarChar(255)
  role        UserRole   @default(NONE)
  status      UserStatus @default(ACTIVE)
  point       Int        @default(0) @db.UnsignedInt
  createdAt   DateTime   @default(now()) @db.DateTime(0)
  updatedAt   DateTime   @default(now()) @updatedAt @db.DateTime(0)

  tickets               Ticket[]
  ticketUserLikes       TicketUserLike[]
  personSuggestions     PersonSuggestion[]
  personSuggestionLikes PersonSuggestionLike[]
  googleAuthCredential  GoogleAuthCredential?
  twitterAuthCredential TwitterAuthCredential?
}

model Ticket {
  id                     String   @id @default(uuid())
  userId                 String   @db.VarChar(255)
  uploadedImageId        String?  @unique @db.VarChar(255)
  externalImageId        String?  @unique @db.VarChar(255)
  personId               String?  @db.VarChar(255)
  mainPersonSuggestionId String?  @unique @db.VarChar(255)
  createdAt              DateTime @default(now()) @db.DateTime(0)
  updatedAt              DateTime @default(now()) @updatedAt @db.DateTime(0)

  user                  User                   @relation(fields: [userId], references: [id])
  uploadedImage         UploadedImage?         @relation(fields: [uploadedImageId], references: [id])
  externalImage         ExternalImage?         @relation(fields: [externalImageId], references: [id])
  person                Person?                @relation(fields: [personId], references: [id])
  mainPersonSuggestion  PersonSuggestion?      @relation(name: "mainPersonSuggestion", fields: [mainPersonSuggestionId], references: [id])
  ticketUserLikes       TicketUserLike[]
  personSuggestions     PersonSuggestion[]
  personSuggestionLikes PersonSuggestionLike[]
}

model UploadedImage {
  id         String   @id @default(uuid())
  bucketName String   @db.VarChar(255)
  fileName   String   @db.VarChar(512)
  url        String   @unique @db.VarChar(512)
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.DateTime(0)

  ticket Ticket?

  @@unique([bucketName, fileName])
}

model ExternalImage {
  id         String   @id @default(uuid())
  url        String   @unique @db.VarChar(512)
  statusCode Int      @db.Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.DateTime(0)

  ticket Ticket?
}

model Person {
  id           String    @id @default(uuid())
  name         String    @unique @db.VarChar(255)
  nameHiragana String?   @db.VarChar(255)
  nameKatakana String?   @db.VarChar(255)
  nameAlphabet String?   @db.VarChar(255)
  birthDate    DateTime? @db.Date
  occupationId String?   @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @updatedAt @db.DateTime(0)

  tickets           Ticket[]
  occupation        Occupation?        @relation(fields: [occupationId], references: [id])
  personSuggestions PersonSuggestion[]
}

model Occupation {
  id           String   @id @default(uuid())
  name         String   @unique @db.VarChar(255)
  nameHiragana String?  @db.VarChar(255)
  nameKatakana String?  @db.VarChar(255)
  nameAlphabet String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.DateTime(0)
  updatedAt    DateTime @default(now()) @updatedAt @db.DateTime(0)

  persons Person[]
}

model TicketUserLike {
  id        String   @id @default(uuid())
  ticketId  String   @db.VarChar(255)
  userId    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  ticket Ticket @relation(fields: [ticketId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([ticketId, userId])
}

model PersonSuggestion {
  id        String   @id @default(uuid())
  ticketId  String   @db.VarChar(255)
  personId  String   @db.VarChar(255)
  userId    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  ticket                Ticket                 @relation(fields: [ticketId], references: [id])
  person                Person                 @relation(fields: [personId], references: [id])
  user                  User                   @relation(fields: [userId], references: [id])
  personSuggestionLikes PersonSuggestionLike[]
  mainTicket            Ticket?                @relation("mainPersonSuggestion")

  @@unique([ticketId, personId])
  @@unique([ticketId, userId])
}

model PersonSuggestionLike {
  id                 String   @id @default(uuid())
  ticketId           String   @db.VarChar(255)
  personSuggestionId String   @db.VarChar(255)
  userId             String   @db.VarChar(255)
  createdAt          DateTime @default(now()) @db.DateTime(0)
  updatedAt          DateTime @default(now()) @updatedAt @db.DateTime(0)

  ticket           Ticket           @relation(fields: [ticketId], references: [id])
  personSuggestion PersonSuggestion @relation(fields: [personSuggestionId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@unique([ticketId, userId])
}

model GoogleAuthCredential {
  id           String   @id @default(uuid())
  userId       String   @unique @db.VarChar(255)
  uid          String   @unique @db.VarChar(255)
  displayName  String?  @db.VarChar(255)
  photoUrl     String?  @db.VarChar(255)
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  email        String   @unique @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.DateTime(0)
  updatedAt    DateTime @default(now()) @updatedAt @db.DateTime(0)

  user User @relation(fields: [userId], references: [id])
}

model TwitterAuthCredential {
  id               String   @id @default(uuid())
  userId           String   @unique @db.VarChar(255)
  uid              String   @unique @db.VarChar(255)
  email            String?  @unique @db.VarChar(255)
  displayName      String?  @db.VarChar(255)
  screenName       String?  @db.VarChar(255)
  photoUrl         String?  @db.VarChar(255)
  accessToken      String   @db.Text
  refreshToken     String   @db.Text
  oauthAccessToken String   @db.Text
  oauthTokenSecret String   @db.Text
  createdAt        DateTime @default(now()) @db.DateTime(0)
  updatedAt        DateTime @default(now()) @updatedAt @db.DateTime(0)

  user User @relation(fields: [userId], references: [id])
}
