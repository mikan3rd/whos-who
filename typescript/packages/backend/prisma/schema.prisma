generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// https://github.com/unlight/prisma-nestjs-graphql
generator nestgraphql {
  provider    = "node ../../node_modules/prisma-nestjs-graphql"
  output      = "./model"
  purgeOutput = true
}

enum UserRole {
  NONE
  MEMBER
  ADMIN
}

model User {
  id          String   @id @db.VarChar(255)
  displayName String?  @db.VarChar(255)
  email       String?  @db.VarChar(255)
  role        UserRole @default(NONE)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.DateTime(0)

  requestedTickets RequestedTicket[]
}

model RequestedTicket {
  id              String   @id @default(uuid())
  userId          String   @db.VarChar(255)
  uploadedImageId String?  @unique @db.VarChar(255)
  externalImageId String?  @unique @db.VarChar(255)
  personId        String?  @unique @db.VarChar(255)
  createdAt       DateTime @default(now()) @db.DateTime(0)
  updatedAt       DateTime @default(now()) @updatedAt @db.DateTime(0)

  user          User           @relation(fields: [userId], references: [id])
  uploadedImage UploadedImage? @relation(fields: [uploadedImageId], references: [id])
  externalImage ExternalImage? @relation(fields: [externalImageId], references: [id])
  person        Person?        @relation(fields: [personId], references: [id])
}

model UploadedImage {
  id         String   @id @default(uuid())
  bucketName String   @db.VarChar(255)
  filePath   String   @db.Text
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.DateTime(0)

  requestedTicket RequestedTicket?
}

model ExternalImage {
  id         String   @id @default(uuid())
  url        String   @db.Text
  statusCode Int      @db.Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.DateTime(0)

  requestedTicket RequestedTicket?
}

model Person {
  id           String    @id @default(uuid())
  name         String    @db.VarChar(255)
  nameHiragana String?   @db.VarChar(255)
  nameKatakana String?   @db.VarChar(255)
  nameAlphabet String?   @db.VarChar(255)
  birthDate    DateTime? @db.Date
  occupationId String?   @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @updatedAt @db.DateTime(0)

  requestedTicket RequestedTicket[]
  occupation      Occupation?       @relation(fields: [occupationId], references: [id])
}

model Occupation {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  nameHiragana String?  @db.VarChar(255)
  nameKatakana String?  @db.VarChar(255)
  nameAlphabet String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.DateTime(0)
  updatedAt    DateTime @default(now()) @updatedAt @db.DateTime(0)

  Person Person[]
}
